{
  "name": "BMAD Technology Discovery",
  "description": "Automatically detect new technologies and suggest relevant documentation MCP servers when dependency files change",
  "when": {
    "type": "fileEdit",
    "patterns": [
      "package.json",
      "package-lock.json",
      "yarn.lock",
      "pnpm-lock.yaml",
      "requirements.txt",
      "requirements-dev.txt",
      "pyproject.toml",
      "poetry.lock",
      "Pipfile",
      "Pipfile.lock",
      "Cargo.toml",
      "Cargo.lock",
      "go.mod",
      "go.sum",
      "pom.xml",
      "build.gradle",
      "build.gradle.kts",
      "gradle.properties",
      "composer.json",
      "composer.lock",
      "Gemfile",
      "Gemfile.lock",
      "mix.exs",
      "mix.lock",
      "pubspec.yaml",
      "pubspec.lock",
      "Dockerfile",
      "docker-compose.yml",
      "docker-compose.yaml",
      "tsconfig.json",
      "jsconfig.json",
      "webpack.config.js",
      "webpack.config.ts",
      "vite.config.js",
      "vite.config.ts",
      "rollup.config.js",
      "rollup.config.ts",
      "tailwind.config.js",
      "tailwind.config.ts",
      "next.config.js",
      "next.config.ts",
      "nuxt.config.js",
      "nuxt.config.ts",
      "vue.config.js",
      "angular.json",
      ".env",
      ".env.local",
      ".env.example"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "Acting as the BMad Master agent with comprehensive technology detection and documentation discovery capabilities:\n\n## Context\nA dependency or configuration file has been modified: {{filePath}}\n\n## Agent Context Integration\nBefore proceeding, activate your BMad Master agent context by referencing:\n- **Agent Steering**: `#[[file:steering/agents/bmad-master-agent.md]]` - Your complete BMad Master agent persona and capabilities\n- **BMAD Methodology**: `#[[file:steering/bmad-method-guide.md]]` - Core BMAD principles and documentation discovery standards\n- **Technical Preferences**: `#[[file:steering/context/frontend-preferences.md]]` and `#[[file:steering/context/technical-preferences.md]]`\n- **Project Context**: `#[[file:steering/context/project-context.md]]` - Project-specific technology requirements\n- **Active Specs**: Check `.kiro/specs/` for current project context and technology requirements\n\n## Your Task\nAnalyze the changes to detect new technologies and suggest relevant documentation MCP servers following BMAD methodology:\n\n### 1. Technology Detection Analysis\n- **Dependency Analysis**: Examine the modified file for new dependencies, frameworks, or libraries\n- **Configuration Analysis**: Identify new tools, build systems, or development environments\n- **Version Changes**: Note significant version updates that might require documentation updates\n- **Technology Stack Changes**: Assess impact on overall technology stack and architecture\n\n### 2. Technology Identification Patterns\n\n**For package.json/yarn.lock/pnpm-lock.yaml:**\n- React, Vue, Angular, Svelte (frontend frameworks)\n- Express, Fastify, Koa, NestJS (backend frameworks)\n- Next.js, Nuxt.js, Gatsby, Remix (meta-frameworks)\n- TypeScript, Babel, ESLint, Prettier (development tools)\n- Jest, Vitest, Cypress, Playwright (testing frameworks)\n- Tailwind CSS, Styled Components, Emotion (styling)\n\n**For requirements.txt/pyproject.toml/poetry.lock:**\n- Django, Flask, FastAPI, Starlette (web frameworks)\n- NumPy, Pandas, Matplotlib, Scikit-learn (data science)\n- PyTorch, TensorFlow, Keras (machine learning)\n- SQLAlchemy, Django ORM, Peewee (ORMs)\n- Pytest, Unittest, Nose (testing frameworks)\n\n**For Cargo.toml/Cargo.lock:**\n- Actix, Rocket, Warp, Axum (web frameworks)\n- Serde, Tokio, Async-std (core libraries)\n- Diesel, SQLx, SeaORM (database libraries)\n\n**For go.mod/go.sum:**\n- Gin, Echo, Fiber, Chi (web frameworks)\n- GORM, Ent, SQLBoiler (ORMs)\n- Cobra, Viper (CLI tools)\n\n**For pom.xml/build.gradle:**\n- Spring Boot, Spring Framework, Quarkus (frameworks)\n- Hibernate, MyBatis, JPA (persistence)\n- JUnit, TestNG, Mockito (testing)\n\n**For Docker files:**\n- Base images (node, python, golang, openjdk, nginx)\n- Database systems (postgres, mysql, redis, mongodb)\n- Message queues (rabbitmq, kafka, redis)\n\n### 3. GitHub Repository Resolution\nFor each identified technology, determine the official GitHub repository:\n\n**Framework Examples:**\n- React ‚Üí facebook/react\n- Vue.js ‚Üí vuejs/vue\n- Angular ‚Üí angular/angular\n- Django ‚Üí django/django\n- Flask ‚Üí pallets/flask\n- Express ‚Üí expressjs/express\n- Spring Boot ‚Üí spring-projects/spring-boot\n- Rust ‚Üí rust-lang/rust\n- Go ‚Üí golang/go\n\n**Repository Quality Assessment:**\n- **High Priority**: Official repositories, active maintenance, comprehensive documentation\n- **Medium Priority**: Well-maintained community projects, good documentation\n- **Low Priority**: Experimental or niche libraries, limited documentation\n\n### 4. GitMCP URL Generation\nConvert GitHub repository URLs to GitMCP format:\n- **GitHub Format**: https://github.com/owner/repo\n- **GitMCP Format**: https://gitmcp.io/owner/repo\n\n**Examples:**\n- https://github.com/facebook/react ‚Üí https://gitmcp.io/facebook/react\n- https://github.com/django/django ‚Üí https://gitmcp.io/django/django\n- https://github.com/expressjs/express ‚Üí https://gitmcp.io/expressjs/express\n\n### 5. MCP Server Configuration Generation\nFor each suggested technology, generate MCP server configuration:\n\n```json\n{\n  \"[technology-name]-docs\": {\n    \"command\": \"npx\",\n    \"args\": [\"mcp-remote\", \"https://gitmcp.io/owner/repo\"],\n    \"disabled\": false,\n    \"autoApprove\": [\n      \"fetch_[repo]_documentation\",\n      \"search_[repo]_documentation\",\n      \"search_[repo]_code\"\n    ],\n    \"metadata\": {\n      \"addedBy\": \"bmad-tech-discovery\",\n      \"technology\": \"[technology-name]\",\n      \"priority\": \"[high|medium|low]\",\n      \"addedDate\": \"[current-date]\",\n      \"detectedFrom\": \"{{filePath}}\"\n    }\n  }\n}\n```\n\n### 6. Priority Classification System\n\n**High Priority** (Critical for project success):\n- Core frameworks (React, Django, Spring Boot)\n- Primary languages (TypeScript, Python, Rust)\n- Essential build tools (Webpack, Vite, Next.js)\n\n**Medium Priority** (Important for development):\n- Testing frameworks (Jest, Pytest, JUnit)\n- Styling libraries (Tailwind CSS, Styled Components)\n- Database ORMs (Prisma, SQLAlchemy, Hibernate)\n\n**Low Priority** (Nice to have):\n- Utility libraries (Lodash, Moment.js)\n- Development tools (ESLint, Prettier)\n- Experimental or niche libraries\n\n### 7. User Approval Workflow\nPresent suggestions in this format:\n\n```markdown\n## üîç New Technologies Detected\n\nI've detected the following new technologies in {{filePath}}:\n\n### High Priority Documentation\n- **[Technology Name]** ([GitHub URL])\n  - GitMCP: [GitMCP URL]\n  - Reason: [Why this documentation is important]\n  - Impact: [How it affects the project]\n\n### Medium Priority Documentation\n- **[Technology Name]** ([GitHub URL])\n  - GitMCP: [GitMCP URL]\n  - Reason: [Why this documentation is useful]\n\n### Recommended Actions\n1. Add high-priority documentation servers immediately\n2. Consider medium-priority servers based on project needs\n3. Update MCP configuration with approved servers\n\n**Would you like me to add these documentation servers to your MCP configuration?**\n```\n\n### 8. MCP Configuration Management\nIf user approves:\n1. Read current `.kiro/settings/mcp.json` configuration\n2. Add new MCP servers without overwriting existing ones\n3. Merge configurations intelligently\n4. Validate configuration syntax\n5. Provide confirmation of changes made\n\n### 9. Integration with BMAD Context\n- Reference current specs from `.kiro/specs/` for project context\n- Use technical preferences from `steering/context/technical-preferences.md`\n- Follow BMAD methodology from `steering/bmad-method-guide.md`\n- Consider project-specific context from `steering/context/project-context.md`\n\n### 10. Error Handling and Fallbacks\n- If GitHub repository cannot be determined, suggest manual research\n- If GitMCP URL is invalid, provide alternative documentation sources\n- If MCP configuration fails, provide manual configuration instructions\n- Always provide clear next steps and recovery options\n\n## Reference Files\n- BMAD methodology: `steering/bmad-method-guide.md`\n- Technical preferences: `steering/context/technical-preferences.md`\n- Current MCP config: `.kiro/settings/mcp.json`\n- Active specs: `.kiro/specs/*/`\n\nPlease proceed with analyzing the dependency changes and suggesting relevant documentation MCP servers."
  }
}