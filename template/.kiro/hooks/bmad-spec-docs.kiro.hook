{
  "name": "BMAD Spec Documentation Sync",
  "description": "Automatically update project documentation when main tasks are completed in BMAD specs",
  "when": {
    "type": "fileEdit",
    "patterns": [
      ".kiro/specs/**/tasks.md"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "Acting as the BMad Orchestrator agent with comprehensive project analysis and documentation management capabilities:\n\n## Context\nA spec file has been modified: {{filePath}}\n\n## Agent Context Integration\nBefore proceeding, activate your BMad Orchestrator agent context by referencing:\n- **Agent Steering**: `#[[file:steering/agents/bmad-orchestrator-agent.md]]` - Your complete BMad Orchestrator agent persona and capabilities\n- **BMAD Methodology**: `#[[file:steering/bmad-method-guide.md]]` - Core BMAD principles and documentation management standards\n- **Technical Preferences**: `#[[file:steering/context/frontend-preferences.md]]` and `#[[file:steering/context/technical-preferences.md]]`\n- **Project Context**: `#[[file:steering/context/project-context.md]]` - Project-specific documentation requirements\n- **Active Specs**: Check `.kiro/specs/` for current project context and cross-spec analysis\n\n## Your Task\nAnalyze the spec content to identify technology requirements and suggest relevant documentation MCP servers following BMAD methodology:\n\n### 1. Spec Content Analysis\n\n**For Requirements Files (requirements.md):**\n- **Functional Requirements**: Extract technology mentions from user stories and acceptance criteria\n- **Non-Functional Requirements**: Identify performance, security, scalability technology needs\n- **Integration Requirements**: Detect external services, APIs, and third-party systems\n- **Platform Requirements**: Identify target platforms, deployment environments, device constraints\n\n**For Design Files (design.md):**\n- **Architecture Decisions**: Extract framework, library, and technology choices\n- **System Components**: Identify databases, message queues, caching systems, APIs\n- **Technology Stack**: Detect frontend, backend, mobile, and infrastructure technologies\n- **Integration Patterns**: Identify communication protocols, data formats, authentication methods\n\n**For Task Files (tasks.md):**\n- **Implementation Tasks**: Extract specific technologies mentioned in development tasks\n- **Testing Requirements**: Identify testing frameworks, tools, and methodologies\n- **Deployment Tasks**: Detect CI/CD tools, containerization, cloud services\n- **Development Tools**: Identify build systems, package managers, development environments\n\n### 2. Technology Detection Patterns\n\n**Frontend Technologies:**\n- React, Vue, Angular, Svelte, Solid (component frameworks)\n- Next.js, Nuxt.js, Gatsby, Remix, SvelteKit (meta-frameworks)\n- TypeScript, JavaScript, WebAssembly (languages)\n- Tailwind CSS, Styled Components, Emotion, Sass (styling)\n- Webpack, Vite, Rollup, Parcel (build tools)\n\n**Backend Technologies:**\n- Express, Fastify, Koa, NestJS (Node.js frameworks)\n- Django, Flask, FastAPI, Starlette (Python frameworks)\n- Spring Boot, Quarkus, Micronaut (Java frameworks)\n- Gin, Echo, Fiber, Chi (Go frameworks)\n- Actix, Rocket, Warp, Axum (Rust frameworks)\n\n**Database Technologies:**\n- PostgreSQL, MySQL, SQLite, MongoDB (databases)\n- Prisma, TypeORM, Sequelize (Node.js ORMs)\n- SQLAlchemy, Django ORM, Peewee (Python ORMs)\n- Hibernate, MyBatis, JPA (Java ORMs)\n- GORM, Ent, SQLBoiler (Go ORMs)\n\n**Infrastructure Technologies:**\n- Docker, Kubernetes, Helm (containerization)\n- AWS, GCP, Azure (cloud platforms)\n- Terraform, Pulumi, CloudFormation (IaC)\n- GitHub Actions, GitLab CI, Jenkins (CI/CD)\n- Nginx, Apache, Traefik (web servers)\n\n**Testing Technologies:**\n- Jest, Vitest, Mocha, Jasmine (JavaScript testing)\n- Pytest, Unittest, Nose (Python testing)\n- JUnit, TestNG, Mockito (Java testing)\n- Cypress, Playwright, Selenium (E2E testing)\n\n**Mobile Technologies:**\n- React Native, Flutter, Ionic (cross-platform)\n- Swift, Kotlin, Objective-C, Java (native)\n- Expo, Capacitor (development platforms)\n\n### 3. Context-Aware Technology Prioritization\n\n**Critical Priority** (Essential for spec implementation):\n- Core frameworks mentioned in architecture decisions\n- Primary databases and data storage solutions\n- Authentication and security technologies\n- Main deployment and hosting platforms\n\n**High Priority** (Important for development workflow):\n- Testing frameworks and quality assurance tools\n- Build systems and development tools\n- API frameworks and communication protocols\n- Monitoring and logging solutions\n\n**Medium Priority** (Useful for optimization and enhancement):\n- Performance optimization libraries\n- UI/UX enhancement tools\n- Development productivity tools\n- Analytics and tracking solutions\n\n**Low Priority** (Nice to have or experimental):\n- Experimental or cutting-edge technologies\n- Utility libraries with extensive alternatives\n- Development convenience tools\n\n### 4. Spec-Driven Documentation Recommendations\n\n**Based on Spec Phase:**\n\n**Requirements Phase:**\n- Focus on business domain technologies\n- Prioritize user-facing technologies\n- Include compliance and security frameworks\n- Consider accessibility and internationalization tools\n\n**Design Phase:**\n- Emphasize architectural frameworks and patterns\n- Include system integration technologies\n- Focus on scalability and performance tools\n- Consider data modeling and storage technologies\n\n**Implementation Phase:**\n- Prioritize development frameworks and tools\n- Include testing and quality assurance technologies\n- Focus on deployment and DevOps tools\n- Consider debugging and monitoring solutions\n\n### 5. GitHub Repository Resolution and Validation\n\nFor each identified technology:\n\n**Repository Resolution Process:**\n1. **Official Repository Identification**: Find the primary/official GitHub repository\n2. **Repository Quality Assessment**: Evaluate activity, documentation quality, community support\n3. **Alternative Sources**: Identify backup documentation sources if GitHub repo is insufficient\n4. **Documentation Completeness**: Assess whether the repository has comprehensive documentation\n\n**Quality Assessment Criteria:**\n- **Excellent**: Active maintenance, comprehensive docs, large community, official support\n- **Good**: Regular updates, decent documentation, active community\n- **Fair**: Occasional updates, basic documentation, small community\n- **Poor**: Inactive, minimal documentation, no community support\n\n### 6. GitMCP URL Generation and Validation\n\n**URL Conversion Process:**\n1. **GitHub to GitMCP**: Convert https://github.com/owner/repo to https://gitmcp.io/owner/repo\n2. **URL Validation**: Verify GitMCP URL accessibility and functionality\n3. **Fallback Options**: Provide alternative documentation sources if GitMCP is unavailable\n4. **Configuration Testing**: Ensure MCP server configuration will work correctly\n\n### 7. Contextual MCP Server Configuration\n\nGenerate spec-aware MCP server configurations:\n\n```json\n{\n  \"[technology-name]-docs\": {\n    \"command\": \"npx\",\n    \"args\": [\"mcp-remote\", \"https://gitmcp.io/owner/repo\"],\n    \"disabled\": false,\n    \"autoApprove\": [\n      \"fetch_[repo]_documentation\",\n      \"search_[repo]_documentation\",\n      \"search_[repo]_code\"\n    ],\n    \"metadata\": {\n      \"addedBy\": \"bmad-spec-docs\",\n      \"technology\": \"[technology-name]\",\n      \"priority\": \"[critical|high|medium|low]\",\n      \"specContext\": \"{{filePath}}\",\n      \"specPhase\": \"[requirements|design|implementation]\",\n      \"addedDate\": \"[current-date]\",\n      \"relevantFor\": [\"[spec-sections-where-mentioned]\"]\n    }\n  }\n}\n```\n\n### 8. Intelligent Documentation Suggestions\n\nPresent suggestions with spec context:\n\n```markdown\n## ðŸ“‹ Spec Documentation Analysis\n\n**Spec File**: {{filePath}}\n**Analysis Context**: [Requirements/Design/Implementation] phase\n\n### Critical Documentation Needs\n- **[Technology]** ([GitHub URL])\n  - **GitMCP**: [GitMCP URL]\n  - **Spec Context**: Mentioned in [specific sections]\n  - **Why Critical**: [Explanation of importance to spec implementation]\n  - **Usage Context**: [How it will be used in the project]\n\n### High Priority Documentation\n- **[Technology]** ([GitHub URL])\n  - **GitMCP**: [GitMCP URL]\n  - **Spec Context**: Referenced in [specific sections]\n  - **Why Important**: [Explanation of value to development]\n\n### Recommended Documentation Strategy\n1. **Immediate Needs**: Add critical documentation for core technologies\n2. **Development Phase**: Add high-priority docs before implementation begins\n3. **Enhancement Phase**: Consider medium-priority docs for optimization\n\n### Spec-Specific Recommendations\n- **For Requirements**: Focus on business domain and user-facing technologies\n- **For Design**: Emphasize architectural and integration technologies\n- **For Implementation**: Prioritize development tools and frameworks\n\n**Would you like me to add these documentation servers to your MCP configuration?**\n```\n\n### 9. Progressive Documentation Discovery\n\n**Spec Evolution Tracking:**\n- Track which technologies were suggested at each spec phase\n- Avoid duplicate suggestions for already-configured technologies\n- Suggest documentation updates when spec requirements change\n- Provide documentation cleanup suggestions for removed technologies\n\n**Cross-Spec Analysis:**\n- Analyze multiple specs to identify common technology patterns\n- Suggest project-wide documentation strategies\n- Identify technology conflicts or inconsistencies across specs\n- Recommend standardization opportunities\n\n### 10. Integration with BMAD Workflow\n\n**BMAD Agent Coordination:**\n- Coordinate with PM agent for business requirement technologies\n- Work with Architect agent for technical architecture documentation\n- Support Dev agent with implementation-specific documentation\n- Assist QA agent with testing framework documentation\n\n**BMAD Methodology Alignment:**\n- Follow BMAD principles for technology selection and documentation\n- Support BMAD workflow phases with appropriate documentation timing\n- Integrate with BMAD quality gates and review processes\n- Maintain consistency with BMAD technical preferences\n\n### 11. Error Handling and Recovery\n\n**Common Issues and Solutions:**\n- **Technology Not Found**: Provide manual research guidance and alternative sources\n- **Invalid GitMCP URL**: Suggest direct GitHub documentation or official docs\n- **MCP Configuration Conflicts**: Provide conflict resolution strategies\n- **Documentation Quality Issues**: Suggest alternative or supplementary sources\n\n**Fallback Strategies:**\n- Use official project websites when GitHub docs are insufficient\n- Suggest community resources and tutorials for complex technologies\n- Provide local documentation setup instructions when MCP fails\n- Offer manual configuration guidance for complex setups\n\n## Reference Files\n- BMAD methodology: `steering/bmad-method-guide.md`\n- Technical preferences: `steering/context/technical-preferences.md`\n- Project context: `steering/context/project-context.md`\n- Current MCP config: `.kiro/settings/mcp.json`\n- Related specs: `.kiro/specs/*/`\n\nPlease proceed with analyzing the spec content and suggesting relevant technology documentation."
  }
}